@model List<Domain.Entities.Event>
@{
	var userRole = (string)ViewData["UserRole"];
}

<h2>Events List</h2>

<table>
	<thead>
		<tr>
			<th>Title</th>
			<th>Description</th>
			<th>Start Date</th>
			<th>Location</th>
			<th>Category</th>
			<th>Max Participants</th>
			@if (userRole == "Admin")
			{
				<th>Id</th>
				<th>Action</th>
			}
		</tr>
	</thead>
	<tbody>
 		@foreach (var eventItem in Model)
		{
			<tr>
				<td>@eventItem.Title</td>
				<td>@eventItem.Description</td>
				<td>@eventItem.StartDateTime.ToString("g")</td>
				<td>@eventItem.Location</td>
				<td>@eventItem.Category</td>
				<td>@eventItem.MaxParticipants</td>

				@if (userRole == "Admin")
				{
					<td>@eventItem.Id</td>
					<td>
						<!-- Кнопка для изменения -->
						<button class="btn btn-primary" onclick="editEvent('@eventItem.Id')">Изменить</button>

						<!-- Кнопка для удаления -->
						<button class="btn btn-danger" onclick="deleteEvent('@eventItem.Id')">Удалить</button>
					</td>
				}
			</tr>
		}
	</tbody>
</table>

<script>
	// Функция для отправки DELETE-запроса
	async function deleteEvent(eventId) {
		const url = `/api/Events/${eventId}`;

		const response = await fetch(url, {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json',
			},
		});

		if (response.ok) {
			alert('Событие успешно удалено!');
			location.reload(); // Перезагружаем страницу после удаления
		} else {
			alert('Ошибка при удалении события!');
		}
	}
</script>